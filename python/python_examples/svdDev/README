This code is a proof of concept and is under development. The c code 
represents the counterpoint of the SVD python code in decompositionUtilities.py
developed in the matrixDecompostion example.

In this directory is svd code developed using the C VSIPL library. It is 
proof of concept and development code toward a native C VSIPL svd routine as 
defined in the VSIPL specification. The code should not be considered 
as well written from a performance or robustness point of view. Shortcuts
are taken to save development time.

The purpose of the code, beyond being a step in development of a native 
C VSIPL routine, is to serve as a demonstration of converting from pyJvsip 
code to C VSIPL code. In addition it demonstrates how to test C VSIPL 
code using swig and python VSIPL modules in tandem with the C code. 

NOTE make.sh
The make.sh file is a /bin/sh file to run swig and create the wrapper
code, compile the C VSIPL code and the wrapper code to object files, and to
create a library and python module suitable for loading into python.
This make is very system dependent and will probably require editing 
for each system. The result is a loadable python module.
The loaded module allows easy execution of the C VSIPL subroutines
without writing special main routines. This should simplify testing
and comparison between the C routines and the corresponding python 
routines.

NOTE
The decompositionUtilities.py file is included here for use by the 
svdUtilsTestNB notebook when testing. It contains the python code being
converted to C VSIPL. This file is a copy of the file with the same name
in  python/python_examples/matrixDecomposition of the jvsip distribution.
It is only included here for convenience. Probably should use a link.

Notes on debugging and development
The VI_svd_f.h file includes the low-level svd routines. The file in this directory
(svdDev) is written using just VSIP User code. The VI_svd_f.h file in the c_VSIP_src
directory is being converted to library code using private information. This allows
us to debug the files in tandem. The svd code in decomposition utilities may also be
used to write python user routines to mirror the testVsip routines. Results and accuracy
can be compared and bugs sorted out. For the below to work you need C VSIPL to be built
so libvsip.a is in lib and vsip.h is in include. 

NOTE: INFO BELOW IS NOT STRICTLY VALID ANYMORE. Testing routines are changed to support
testing jvsip_svd_f.c . These routines are built into libvsip.a now so can be built without
the addition of vsip_svd.c. Some header file modifications have also been made.
I keep this info incase I need to backup.
   To compile testVsipSvd.c using VI_svd_f.h c_VSIP_src directory 
   cc -o testVsipSvd testVsipSvd.c vsip_svd.c -I../../../c_VSIP_src -L../../../lib -lvsip

   and to compile for VI_svd_f.h in svdTest directory use
   cc -o testVsipSvd testVsipSvd.c VU_svd.c -I../../../include -L../../../lib -lvsip

for complex use testVsipCsvd.c instead of testVsipSvd.c

Modify testVsip*.c for various test cases.

NOTE:
The C VSIP svd is done, at least version one and is also supported in pyJvsip
although work remains. I will use this directory for documentation and will try to
cleanup the code so it is consistent and works. I am having a little trouble doing this
so it can be built and used by somebody other than myself. It's main value is documentation
and support of the C VSIPL code to improve it's maintainablity.
